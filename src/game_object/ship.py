from game_object.ship_section import ShipSection


class Ship:
    """
    Это класс служит для представления корабля.

    Класс является составным - выступает в роли хранилища для экземпляров класса ShipSection.

    Атрибыты:
    _________________________________________________________________________
        _rank (тип int): ранг корабля (его длинна)
    _________________________________________________________________________
        _sections (тип list[ShipSection, ShipSection ...]): список хранящий секции корабля.
    _________________________________________________________________________
        _mask (тип list[tuple(int, int), tuple(int, int)...]): список координа клеток игровой доски, которые
          непосредственно граничат с кораблем.
    _________________________________________________________________________
        _lives (тип int): "здоровье" корабля, тоесть сколько секций корабля являются "живыми".
    _________________________________________________________________________
        _mode (тип str): режим определяющий принадлежность корабля,
                 "player" - корабль принадлежит игроку,
                 "enemy" - корабль принадлежит врагу (компьютеру).
    """
    def __init__(self, rank, mode):
        """
        Конструктор класса Ship

        Параметры:
        _________________________________________________________________________
            rank (тип int): ранг корабля (его длинна)
        _________________________________________________________________________
            mode (тип str): режим определяющий принадлежность корабля,
             "player" - корабль принадлежит игроку,
             "enemy" - корабль принадлежит врагу (компьютеру).
        """
        self._rank = rank
        self._sections = []
        self._mask = []
        self._lives = rank
        self._mode = mode

    def decrement_lives(self):
        """
        Метод отвечает за уменьшения "жизней" корабля на одну единицу.
        """
        if self._lives != 0:
            self._lives -= 1
        else:
            raise IndexError('An attempt to change the number of lives of a dead ship!')

    @property
    def sections(self):
        """
        Свойство отвечает за предоставление списка секций корабля (екземляров класса ShipSection).

        _________________________________________________________________________
        Возвращает:
            list[ShipSection, ShipSection ...]: секции из которых состоит корабль.
        """
        return self._sections

    @sections.setter
    def sections(self, coords):
        """
        Свойство-сеттер отвечает за добавление секций (екземляров класса ShipSection) к кораблю.

        Параметры:
        _________________________________________________________________________
            coords (тип list[(int, int), (int, int) ...]): список координат секций корабля.
        """
        if len(coords) <= self._rank:
            self._sections.extend([ShipSection(x, y, self, self._mode) for x, y in coords])
        else:
            raise ValueError('The number of ship sections exceeds the rank of the ship!')

    @property
    def rank(self):
        """
        Свойство отвечает за предоставление ранга (количества секций) корабля.

        _________________________________________________________________________
        Возвращает:
            int: ранга (количество секций) корабля.
        """
        return self._rank

    @property
    def mask(self):
        """
        Свойство отвечает за предоставление списка координат клеток игровой доски,
        которые непосредственно граничат с кораблем.

        _________________________________________________________________________
        Возвращает:
            list[tuple(int, int), tuple(int, int)...]): список координа клеток игровой доски, которые
             непосредственно граничат с кораблем.
        """
        return self._mask

    @mask.setter
    def mask(self, coords):
        """
        Свойство-сеттер отвечает за добавление списока координат клеток игровой доски, которые
         непосредственно граничат с кораблем.

        Параметры:
        _________________________________________________________________________
            coords (тип list[(int, int), (int, int) ...]): список координат секций корабля.
        """
        self._mask.extend(coords)

    @property
    def is_killed(self):
        """
        Свойство отвечает за предоставление логического флага, который определяет "жив" корабль или "убит".

        _________________________________________________________________________
        Возвращает:
            True: если корабль "убит",
            False: если корбль "жив".
        """
        return self._lives == 0

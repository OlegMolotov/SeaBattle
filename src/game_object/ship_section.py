from game_object.base_game_object import BaseGameObject


class ShipSection(BaseGameObject):
    """
        Это класс служит для представления секции корабля на игровой доске.

        Атрибыты:
        _________________________________________________________________________
            _color (тип str): цвет корабля
        _________________________________________________________________________
            _ship (тип Ship): ссылка на экземляр класса Ship частью которого является экземляр данного класса.
        """
    def __init__(self, x, y, ship, mode):
        """
            Конструктор класса ShipSection

            Параметры:
            _________________________________________________________________________
                x (тип int): координата секции корабля по оси х игровой доски.
            _________________________________________________________________________
                y (тип int): координата секции корабля по оси y игровой доски.
            _________________________________________________________________________
                ship (тип Ship): ссылка на экземляр класса Ship частью которого является экземляр данного класса.
            _________________________________________________________________________
                mode (тип str): режим определяющий принадлежность секции корабля,
                 "player" - секция принадлежит кораблю игрока,
                 "enemy" - секция принадлежит кораблю врага (компьютера).
        """
        super().__init__(x, y, mode)
        self._color = self._get_color(ship.rank)
        self._ship = ship

    @property
    def coord(self):
        """
        Свойство отвечает за предоставления координат секции корабля.

        _________________________________________________________________________
        Возвращает:
            tuple(int, int): координата секции корабля на игровой доске.
        """
        return self._coord

    @property
    def is_alive(self):
        """
        Свойство отвечает за предоставление логического флага определяющего "жива" секция корабля или "убита".

        _________________________________________________________________________
        Возвращает:
            True: в случае если секция "жива",
            False: в случае если секция "убита".
        """
        return self._is_alive

    def kill(self):
        """
        Метод "убивает" секцию корабля.
        """
        if self._is_alive:
            self.ship.decrement_lives()
            self._is_alive = False
        else:
            raise ValueError(f'The section {self.coord} has already been killed!')

    @staticmethod
    def _get_color(rank):
        """
        Метод отвечает за предоставление цвета секции корабля в зависимости от ранга корабля.

        Параметры:
        _________________________________________________________________________
            rank (тип int): ранг корабля.
        _________________________________________________________________________
        Возвращает:
            str: цвет секции корабля.
        """
        colors = {1: 'violet', 2: 'yellow', 3: 'green', 4: 'red'}

        return colors[rank]

    @property
    def ship(self):
        """
        Свойство отвечает за предоставление ссылки на экземляр класса Ship.

        _________________________________________________________________________
        Возвращает:
            Ship: ссылка на экземляр класса Ship частью которого является экземляр данного класса.
        """
        return self._ship

    def _get_view(self):
        """
        Метод отвечает за предоставление строкового представления секции корабля.

        _________________________________________________________________________
        Возвращает:
            str: представление секции корабля на игровой доске.
        """
        view = self._VIEW['alive_ship']
        color = self._COLORS[self._color]

        if not self._is_alive:
            view = self._VIEW['destroyed_ship']

        if not self._is_visible and self._is_alive:
            view = self._VIEW['alive_cell']
            color = self._COLORS['blue']
        elif not self._is_visible and not self._is_alive and not self.ship.is_killed:
            color = self._COLORS['red']

        if self._is_colored:
            return f'\033[{color}m{view}\033[0m'
        else:
            return view

    def __repr__(self):
        return self._get_view()